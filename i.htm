<!doctype html>
    <span id=t style="position:absolute;color:white;"></span>
    <canvas id=c style="background:#000;position:aboslute">
<style>
    body{margin:0}
</style>
<script>
    
    function displayCrash() {
        
    }
    
    function displayMission() {
        
    }
    
    
    
    
missions = [
    {n:'iss',r:'soyouz'},
    {n:'apollo',r:'saturn V'},
    {n:'spaceMars',r:'vulcain9'},
]    
mousePos = new v2d(0,0)

Number.prototype.m = function(n){return((this%n)+n)%n;}

function v2d(x,y) {
    this.x = x
    this.y = y
}
        
    
v2d.prototype.X = function(o){
    this.x=this.x*o.x;
    this.y=this.y*o.y;
}

v2d.prototype.gravity = function(a) {
    var norm = this.stance(a)
    return new v2d((this.x - a.x) / norm,(this.y - a.y) / norm)
}

v2d.prototype.add = function(o){
    this.x=this.x+o.x;
    this.y=this.y+o.y;
}

v2d.prototype.sub = function(o){
    this.x=this.x-o.x;
    this.y=this.y-o.y;
}

v2d.prototype.scale = function(n){
    this.x=this.x*n;this.y=this.y*n;
}
    
v2d.prototype.toString = function() {
    return 'x:'+this.x+'|y:'+this.y
}

v2d.prototype.x = function() {
    return this.x
}

v2d.prototype.y = function() {
    return this.y
}

v2d.prototype.stance = function(o) {
    return Math.sqrt(
        (this.y-o.y)*(this.y-o.y)+  
        (this.x-o.x)*(this.x-o.x)
    )
}
v2d.prototype.norm = function() {
    return Math.hypot(this.x,this.y)
}

oldDate = new Date();
nz = 10
sun = {pos : new v2d(0,0), stance: 0, name : 'sun', G : 50}
stars = []
g = function(x,player,planets){  
    

    player = {
        
        pos : new v2d(200,200),
        heading:Math.PI/2,
        agility:Math.PI/45,
        speed : new v2d(0,0),
        acc : new v2d(0,0),
        right:false,
        M:1000,
        mass : 1,
        left:false,
        thrustUp:false,
        linkedTo:null,
        attratedBy:null,
        stages:[
            {isOn:false, power:1.3, isCurrent:true}
        ],
        thrustDown:false,
        thrust : 0,
        move : function(delta){
            
            //collision
            
            
            if(player.linkedTo){
                //landed
                player.pos.x=player.linkedTo.pos.x
                player.pos.y=player.linkedTo.pos.y+player.linkedTo.diameter
            } else {
                
                //collide
                planets.forEach(function(planet){
                    
                    if(player.pos.stance(planet.pos) < planet.diameter / 2) {
                        // collide 
                        // go get energy !
                        var choc = player.speed.norm() // approx energy     
                        if(choc >= 0) {
                            displayCrash()
                            console.log("crash with e: ",choc)
                        } 
                    }
                })
                    
                    
                
                //orbital mechanic
                
                //gravity well                
                sun.stance = sun.pos.stance(player.pos)
                
                g = sun.G / (sun.stance * sun.stance)
                player.attratedBy = sun
                
                planets.forEach(function(planet) {
                    planet.stance = planet.pos.stance(player.pos)    
                    if((planet.G / (planet.stance * planet.stance)) > g) {
                        g = planet.G / (planet.stance * planet.stance)
                        player.attratedBy = planet
                    }
                })
                
                var gravityV = player.attratedBy.pos.gravity(player.pos)
                
                //atmoshperic
                
                
                
                //engine
                if(player.stages[0].isOn) {
                
                    player.acc = new v2d(Math.cos(player.heading)*player.stages[0].power*player.thrust, 
                                         Math.sin(player.heading)*player.stages[0].power*player.thrust)
                    
                    console.log(player.acc)
                    player.acc.add(gravityV)        
                    player.speed.add(player.acc)
                    
                    
                    var ss = new v2d(player.speed.x, player.speed.y)
                    ss.scale(0.16)
                    
                    player.pos.add(ss)
                }
            } 
        },
        
        link : function(o) {
            player.linkedTo = o
            player.attratedBy = o
            player.pos.x = o.pos.x 
            player.pos.y = o.pos.y+(o.diameter/2)
        },
        
        stage : function() {
                player.stages[0].isOn = true
                console.log("Start engine")
                player.linkedTo = false
        },  
        
        draw : function(x) {
            
            //x.beginPath();
            x.fillStyle = "red"
            x.save()
            x.translate((c.width/2+z(player.pos.x- camera.pos.x))+z((5)) ,(c.height/2+z(player.pos.y- camera.pos.y)+z(10)))
            x.rotate(player.heading)
            x.fillRect(z(-10),z(-5),z(20),z(10))//
            
            x.restore()
            
            t.innerHTML = "thrust : " + player.thrust
        }
    }
    player.toString = function() {
        return 'pos:'+player.pos.toString()+'|heading:'+player.heading+'|thrust:'+player.thrust
    }
    
    player.controll=function(delta){
        if(player.thrustUp&&!player.thrustDown) player.thrust = player.thrust >= 1 ? 1 : player.thrust+0.01    
        if(player.thrustDown&&!player.thrustUp) player.thrust = player.thrust <= 0 ? 0 : player.thrust-0.01 
        if(player.left&&!player.right) player.heading = player.heading >= 2*Math.PI ? 0 : player.heading+player.agility 
        if(player.right&&!player.left) player.heading = player.heading <= 0 ? 2*Math.PI : player.heading-player.agility    
    }
    

    function getNearFuturePlanetPos(futureObect,futureTime) {
        var sunStance = sun.pos.stance(futureObect)
        var g = sun.G / (sunStance * sunStance)
        var nearFuturePlanetPos = sun.pos

        planets.forEach(function(planet) {
            futurePlanetPos = planet.getFuturePosition(futureTime)
            planet.stance = planet.pos.stance(futureObect)    
            if((planet.G / (planet.stance * planet.stance)) > g) {
                g = planet.G / (planet.stance * planet.stance)
                nearFuturePlanetPos = futurePlanetPos
                
            }
        })
        return nearFuturePlanetPos
    }
    
    function trajectory(context) {
        var poss = new v2d(player.pos.x,player.pos.y)
        var speeds = new v2d(player.speed.x,player.speed.y)
        var accs = new v2d(player.acc.x,player.acc.y)
        var attratedBy = sun;
        //player only at this moment 
        // 200 should be enought
        for(var i=0;i<800;i++) {
            
            // new acc
            accs = new v2d(0,0)
             
            //get gravity weel
            var planetPos = getNearFuturePlanetPos(poss, i*0.16)

            //get gravity vector    
            var gravityV = planetPos.gravity(poss)
                            
            speeds.add(gravityV)
            
            // console.log(planet)
            var ss = new v2d(speeds.x,speeds.y)
            ss.scale(0.16)
            poss.add(ss)
            
            context.fillStyle  = '#E8E476'
            context.fillRect(c.width/2+z(poss.x-camera.pos.x+4),c.height/2+z(poss.y-camera.pos.y-5),1,2)            
        }
    }
    
    function navBall(context){
   
        
    
        
        var a1 = new v2d(player.attratedBy.pos.x, player.attratedBy.pos.y)
        a1.sub(player.pos)
        var sheepH = Math.atan2(a1.y,a1.x) + Math.PI 
        h = (player.heading - sheepH).m(2*Math.PI) / (Math.PI * 2) * 200 
        //h += 25
        //h = h.m(100)
        context.save()
        context.fillStyle = "#61C7FA"
        context.fillRect(c.width/2 - 50,c.height - h - 100,100,100)
        context.fillRect(c.width/2 - 50,c.height - h +100,100,100)
        context.fillStyle = "#6DDE70"
        context.fillRect(c.width/2 - 50,c.height - h,100,100)
        //context.fillRect(c.width/2 - 50,c.height - h - 150,100,50)
        //center    
        context.fillStyle = "#FFE659"
        context.fillRect(c.width/2 - 50,c.height - 50,30,3)   
        context.fillRect(c.width/2 + 20,c.height - 50,30,3)   
        
        //console.log(h)
        //context.globalCompositeOperation = "source-over"
        
        // draw prograde 
        
        
        // retrograde
        var r = 10//player.acc
        context.fillRect(c.width/2-5,c.height - r,10,10)
                

       
        context.fillStyle = "#ffffff"

        
        for(var i = 0;i<20;i++){
            // trace angle
                context.fillRect(c.width/2 - 5,c.height - (20 * i) - h + 200,10,1)   
                context.fillRect(c.width/2 - 2,c.height - (20 * i + 10) - h + 200,4,1)   
        }
        
        context.globalCompositeOperation = "destination-in"
        context.fillStyle = "#ffffff"
        context.fillRect(c.width/2 - 50,c.height - 100,100,100)
        
        context.restore()
        
            
    }
    
    document.onmousedown = function(e) {
        
        if(manover == 0) {
            manover = 1
        }        
    }
    
    document.onmouseup = function() {
        if(manover == 1) {
            manover = 3
        }
    }
    
    function drawManover(context) {
        
        if(manover==1) {
            o = new v2d(mousePos.x, mousePos.y)
            context.moveTo(o.x,o.y)
            context.arc(o.x,o.y,3,0,7)
            context.fillStyle = "white"
            context.fill()
        }
        else if(manover==2) {
            context.moveTo(o.x,o.y)
            context.arc(o.x,o.y,3,0,7)
            context.fillStyle = "white"
            context.fill()
            
            context.strokeStyle = "white"
            context.lineTo(mousePos.x,mousePos.y)
            context.stroke()
            
            
        }
        else if(manover==3) {
            
        }
            
    }
    
    document.onkeydown=function(k) {
        if(k.keyCode==38 || k.keyCode==90){ /*up&z*/
            player.thrustUp = true//player.thrust>=100 ? 100 : player.thrust++ 
        }
        if(k.keyCode==40 || k.keyCode==83){ /*down&s*/
            player.thrustDown = true//player.thrust<=0 ? 0 : player.thrust- 
            player.thrustDown = true//player.thrust<=0 ? 0 : player.thrust- 
        }
        if(k.keyCode==37 || k.keyCode==81){ /*left&q*/
            player.left = true; 
        }
        if(k.keyCode==39 || k.keyCode==68){ /*right&d*/
            player.right = true 
        }
        // zoom on o & p
        if(k.keyCode == 79) {
            nz = nz <= 0 ? 0 : nz / 2
        }
        
        if(k.keyCode == 80) {
            nz = nz >= 1000 ? 1000 : nz * 2
        }
        if(k.keyCode == 32) {
            player.stage()
        }
    }
    
    document.onmousewheel = function() {
        
    }
    
    
    document.onmousemove = function(e) {
        mousePos.x = e.clientX
        mousePos.y = e.clientY
    }

    
    document.onkeyup=function(k) {
        if(k.keyCode==38 || k.keyCode==90){ /*up&z*/
            player.thrustUp = false
        }
        if(k.keyCode==40 || k.keyCode==83){ /*down&s*/
            player.thrustDown = false
        }
        if(k.keyCode==37 || k.keyCode==81){ /*left&q*/
            player.left = false; 
        }
        if(k.keyCode==39 || k.keyCode==68){ /*right&d*/
            player.right = false 
        }
    }

    
    
    manover = 0
    x=c.getContext('2d')
    c.width=innerWidth-8;c.height=innerHeight-8
    planets=[]
    camera = player
	planets[0]=new Planet(0.001,500,null,3000,0,0,20, 'blue')
	planets[1]=new Planet(0.0024,250,null,6000,0,0,8, 'red')
    player.link(planets[0])
    prepareStar()
    
    function l(){
        delta = new Date()-oldDate;
        oldDate = new Date()
        c.width^=0
        navBall(x)
        drawStars(x)
        drawManover(x)
        player.controll(delta)
        
        planets.forEach(function(planet) {
            planet.move(delta)
        })
        
        player.move(delta)
                
        planets.forEach(function(planet) {
            planet.draw(x)
        })
        trajectory(x)
        player.draw(x)     
        drawSun(x)
        requestAnimationFrame(l)
    }
    l()
}
/*
	Planet
	s self rotate speed
	S rotate speed
	d diameter
	ox origin x
	oy origin y
	r ressources
	D distance from origin
*/
function Planet(speed,diameter,parent,distanceMinFromParent,distanceMaxFromParent,angle,G,name){
    this.speed=speed
    this.stance = 0
    this.G = G
    this.distanceMaxFromParent = distanceMaxFromParent  
    this.distanceMinFromParent = distanceMinFromParent
    this.diameter=diameter
    this.angle=angle
    this.pos=new v2d(Math.cos(this.angle)*this.distanceMinFromParent,Math.sin(this.angle)*this.distanceMinFromParent)
    this.name=name    
}
    
    
Planet.prototype.toString=function(){
    return this.name,'|speed:'+this.speed.toString()+'|pos:'+this.pos.toString()
}
    
Planet.prototype.draw=function(context){
    context.beginPath()
    //c.width/2+player.pos.x - camera.pos.x,c.height/2+player.pos.y - camera.pos.y
    context.arc(c.width/2+z(this.pos.x - camera.pos.x),c.height/2+z(this.pos.y - camera.pos.y),z(this.diameter),0,7)
    context.fillStyle = "blue";
    context.fill()
    context.closePath()
    //orbit
    context.beginPath()
    context.arc(c.width/2+z(-camera.pos.x),c.height/2+z(-camera.pos.y), z(this.distanceMinFromParent), 0, 7)
    context.strokeStyle = '#2A2D2E'
    context.stroke()
}
 
Planet.prototype.move=function(delta){
    this.angle = this.angle+delta*this.speed/100
    this.pos.x=Math.cos(this.angle)*this.distanceMinFromParent
    this.pos.y=Math.sin(this.angle)*this.distanceMinFromParent
}

Planet.prototype.getFuturePosition=function(delta){
    var angle = this.angle+delta*this.speed/100
    return new v2d(Math.cos(angle)*this.distanceMinFromParent,Math.sin(angle)*this.distanceMinFromParent)
}

function drawSun(x) {
    x.beginPath()
    x.arc(c.width/2-z(camera.pos.x),c.height/2-z(camera.pos.y),z(100),0,7)
    x.fillStyle = "orange";
    x.fill()
    x.closePath()
}

function z(d){
    return (nz*d)/10
}
    
    
    function drawSky() {
        
    }
    
    function drawStars(context) {
        
        for(si in stars) {
            s = stars[si]
        
            context.moveTo(s.starX,s.starY)
            context.arc(s.starX,s.starY, s.intensity,0,7)
            //if(s.blink) {
                context.fillStyle = 'white'
            //}
            context.fill()
        }
    }
    function prepareStar() {
        for(var i=0;i<1;i+=1){
            stars.push({starX : Math.random() * c.width,intensity:Math.random(),blink : Math.random() * 100 >= 80, starY : Math.random() * c.height})
        }
    }
    

            
         
            




g()
</script>